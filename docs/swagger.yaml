basePath: /
definitions:
  model.Address:
    properties:
      address:
        type: string
      district:
        type: string
      district_slug:
        type: string
      division:
        type: string
      division_slug:
        type: string
      full_name:
        type: string
      id:
        type: string
      is_deleted:
        type: boolean
      is_primary:
        type: boolean
      latitude:
        type: number
      longitude:
        type: number
      phone_number:
        type: string
      sub_district:
        type: string
      sub_district_slug:
        type: string
      union:
        type: string
      union_slug:
        type: string
      username:
        type: string
    type: object
  model.AddressCreateReq:
    properties:
      address:
        type: string
      district:
        type: string
      district_slug:
        type: string
      division:
        type: string
      division_slug:
        type: string
      full_name:
        type: string
      is_primary:
        type: boolean
      latitude:
        type: number
      longitude:
        type: number
      phone_number:
        type: string
      sub_district:
        type: string
      sub_district_slug:
        type: string
      union:
        type: string
      union_slug:
        type: string
    type: object
  model.AddressUpdateReq:
    properties:
      address:
        type: string
      district:
        type: string
      district_slug:
        type: string
      division:
        type: string
      division_slug:
        type: string
      full_name:
        type: string
      id:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      phone_number:
        type: string
      sub_district:
        type: string
      sub_district_slug:
        type: string
      union:
        type: string
      union_slug:
        type: string
    type: object
  model.Customer:
    properties:
      birth_date:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      is_deleted:
        type: boolean
      is_verified:
        type: boolean
      occupation:
        type: string
      organization:
        type: string
      profile_pic_url:
        type: string
      recovery_phone_number:
        type: string
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  model.CustomerProfileUpdateReq:
    properties:
      birth_date:
        example: "2006-01-02T15:04:05.000Z"
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        example: male/female/other
        type: string
      occupation:
        type: string
      organization:
        type: string
      profile_pic_url:
        type: string
    type: object
  model.CustomerSignupReq:
    properties:
      captcha_id:
        type: string
      captcha_value:
        type: string
      full_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  model.CustomerSignupVerificationReq:
    properties:
      otp:
        type: string
      username:
        type: string
    type: object
  model.EmptyObject:
    type: object
  model.ForgotPasswordReq:
    properties:
      captcha_id:
        type: string
      captcha_value:
        type: string
      username:
        type: string
    type: object
  model.LoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  model.SetPasswordReq:
    properties:
      otp:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  model.Token:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  model.UpdatePasswordReq:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    type: object
  response.AddressListSuccessRes:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Address'
        type: array
      message:
        example: success message
        type: string
      status:
        example: OK
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2006-01-02T15:04:05.000Z"
        type: string
    type: object
  response.AddressSuccessRes:
    properties:
      data:
        $ref: '#/definitions/model.Address'
      message:
        example: success message
        type: string
      status:
        example: OK
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2006-01-02T15:04:05.000Z"
        type: string
    type: object
  response.CustomerSuccessRes:
    properties:
      data:
        $ref: '#/definitions/model.Customer'
      message:
        example: success message
        type: string
      status:
        example: OK
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2006-01-02T15:04:05.000Z"
        type: string
    type: object
  response.EmptyErrorRes:
    properties:
      data:
        $ref: '#/definitions/model.EmptyObject'
      message:
        example: failure message
        type: string
      status:
        example: Status string corresponding to the error
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2006-01-02T15:04:05.000Z"
        type: string
    type: object
  response.EmptyListErrorRes:
    properties:
      data:
        items:
          $ref: '#/definitions/model.EmptyObject'
        type: array
      message:
        example: failure message
        type: string
      status:
        example: Status string corresponding to the error
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2006-01-02T15:04:05.000Z"
        type: string
    type: object
  response.EmptySuccessRes:
    properties:
      data:
        $ref: '#/definitions/model.EmptyObject'
      message:
        example: success message
        type: string
      status:
        example: OK
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2006-01-02T15:04:05.000Z"
        type: string
    type: object
  response.TokenSuccessRes:
    properties:
      data:
        $ref: '#/definitions/model.Token'
      message:
        example: success message
        type: string
      status:
        example: OK
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2006-01-02T15:04:05.000Z"
        type: string
    type: object
host: https://auth-iamrz1.cloud.okteto.net
info:
  contact:
    email: my.full.name.in.lower.case@gmail.com
    name: Rezoan Tamal
  description: This is auth REST api server
  termsOfService: tbd
  title: auth
  version: "1.0"
paths:
  /api/v1/private/customers/address:
    post:
      description: Add a customer address as long as the total address count for the
        customer is not greater than 5
      parameters:
      - description: Set access token here
        in: header
        name: authorization
        required: true
        type: string
      - description: Some fields are mandatory
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.AddressCreateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.AddressListSuccessRes'
        "400":
          description: Invalid request body, or missing required fields.
          schema:
            $ref: '#/definitions/response.EmptyListErrorRes'
        "401":
          description: Unauthorized access attempt.
          schema:
            $ref: '#/definitions/response.EmptyListErrorRes'
        "500":
          description: API sever or db unreachable.
          schema:
            $ref: '#/definitions/response.EmptyListErrorRes'
      summary: Add a customer address
      tags:
      - Customers
  /api/v1/private/customers/address/{id}:
    delete:
      description: Remove an address for customer using address id
      parameters:
      - description: Set access token here
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.AddressListSuccessRes'
        "400":
          description: Invalid request body, or missing required fields.
          schema:
            $ref: '#/definitions/response.EmptyListErrorRes'
        "401":
          description: Unauthorized access attempt.
          schema:
            $ref: '#/definitions/response.EmptyListErrorRes'
        "500":
          description: API sever or db unreachable.
          schema:
            $ref: '#/definitions/response.EmptyListErrorRes'
      summary: Remove a customer address
      tags:
      - Customers
    patch:
      description: Update an address for customer using address id
      parameters:
      - description: Set access token here
        in: header
        name: authorization
        required: true
        type: string
      - description: Some fields are mandatory
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.AddressUpdateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.AddressListSuccessRes'
        "400":
          description: Invalid request body, or missing required fields.
          schema:
            $ref: '#/definitions/response.EmptyListErrorRes'
        "401":
          description: Unauthorized access attempt.
          schema:
            $ref: '#/definitions/response.EmptyListErrorRes'
        "500":
          description: API sever or db unreachable.
          schema:
            $ref: '#/definitions/response.EmptyListErrorRes'
      summary: Update address by id
      tags:
      - Customers
  /api/v1/private/customers/address/all:
    get:
      description: Get all the addresses of the requesting customer
      parameters:
      - description: Set access token here
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.AddressListSuccessRes'
        "400":
          description: Invalid request body, or missing required fields.
          schema:
            $ref: '#/definitions/response.EmptyListErrorRes'
        "401":
          description: Unauthorized access attempt.
          schema:
            $ref: '#/definitions/response.EmptyListErrorRes'
        "500":
          description: API sever or db unreachable.
          schema:
            $ref: '#/definitions/response.EmptyListErrorRes'
      summary: Get customer's addresses
      tags:
      - Customers
  /api/v1/private/customers/address/primary:
    get:
      description: Get the primary address of the requesting customer
      parameters:
      - description: Set access token here
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.AddressSuccessRes'
        "400":
          description: Invalid request body, or missing required fields.
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "401":
          description: Unauthorized access attempt.
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "417":
          description: User is yet to set a primary address
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "500":
          description: API sever or db unreachable.
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
      summary: Get primary address
      tags:
      - Customers
  /api/v1/private/customers/address/primary/{id}:
    post:
      description: Set an address using address id as the primary address for customer,
        remove the previous primary address if needed
      parameters:
      - description: Set access token here
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.AddressListSuccessRes'
        "400":
          description: Invalid request body, or missing required fields.
          schema:
            $ref: '#/definitions/response.EmptyListErrorRes'
        "401":
          description: Unauthorized access attempt.
          schema:
            $ref: '#/definitions/response.EmptyListErrorRes'
        "500":
          description: API sever or db unreachable.
          schema:
            $ref: '#/definitions/response.EmptyListErrorRes'
      summary: Set a primary address
      tags:
      - Customers
  /api/v1/private/customers/password:
    put:
      consumes:
      - application/json
      description: Update to a new password using customer's existing password
      parameters:
      - description: Set access token here
        in: header
        name: authorization
        required: true
        type: string
      - description: Some fields are mandatory
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UpdatePasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CustomerSuccessRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
      summary: Update existing password
      tags:
      - Customers
  /api/v1/private/customers/profile:
    get:
      description: Returns customer's profile using access token
      parameters:
      - description: Set access token here
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CustomerSuccessRes'
        "400":
          description: Invalid request body, or missing required fields.
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "401":
          description: Unauthorized access attempt.
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "500":
          description: API sever or db unreachable.
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
      summary: Get basic profile
      tags:
      - Customers
    patch:
      consumes:
      - application/json
      description: Update customer's basic profile info
      parameters:
      - description: Set access token here
        in: header
        name: authorization
        required: true
        type: string
      - description: Some fields are mandatory
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CustomerProfileUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CustomerSuccessRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
      summary: Update basic profile
      tags:
      - Customers
  /api/v1/private/customers/refresh-token:
    get:
      consumes:
      - application/json
      description: Generate new access and refresh tokens using current refresh token
      parameters:
      - description: Value of refresh token
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TokenSuccessRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
      summary: Refresh customer's access token
      tags:
      - Customers
  /api/v1/private/customers/verify-token:
    get:
      consumes:
      - application/json
      description: verifyAccessToken lets apps to verify that a provided token is
        in-fact valid
      parameters:
      - description: Value of access token
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EmptySuccessRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
      summary: Verify customer's access token
      tags:
      - Customers
  /api/v1/public/customers/forgot-password:
    post:
      consumes:
      - application/json
      description: Use username and captcha to send otp to customer's registered number
      parameters:
      - description: All fields are mandatory
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.ForgotPasswordReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.EmptySuccessRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
      summary: Request OTP to reset password
      tags:
      - Customers
  /api/v1/public/customers/login:
    post:
      consumes:
      - application/json
      description: Login uses customer defined username and password to authenticate
        a customer.
      parameters:
      - description: All fields are mandatory
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TokenSuccessRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
      summary: Login as a customer
      tags:
      - Customers
  /api/v1/public/customers/set-password:
    post:
      consumes:
      - application/json
      description: Set new password using OTP received during forgot-password
      parameters:
      - description: All fields are mandatory
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.SetPasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EmptySuccessRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
      summary: Set customer's password with OTP
      tags:
      - Customers
  /api/v1/public/customers/signup:
    post:
      consumes:
      - application/json
      description: Signup a new customer for a valid non-existing phone number
      parameters:
      - description: All fields are mandatory
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CustomerSignupReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.EmptySuccessRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
      summary: Signup a new customer
      tags:
      - Customers
  /api/v1/public/customers/verify-signup:
    post:
      consumes:
      - application/json
      description: Use customer defined otp to match it with existing reference in
        cache to verify a signup
      parameters:
      - description: All fields are mandatory
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CustomerSignupVerificationReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EmptySuccessRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.EmptyErrorRes'
      summary: Verify a new customer using otp
      tags:
      - Customers
swagger: "2.0"
